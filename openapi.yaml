openapi: 3.0.0
info:
  version: 1.0.0
  title: Go JWT Server
paths:
  /api/v1/auth/signup:
    post:
      summary: User signup
      description: Endpoint for user signup
      operationId: signup
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserAgent'
      requestBody:
        description: User signup request body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        '201':
          description: OK
  /api/v1/auth/login:
    post:
      summary: User login
      description: Endpoint for user login
      operationId: login
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/LoginSource'
        - $ref: '#/components/parameters/UserAgent'
      requestBody:
        description: User login request body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /api/v1/auth/password:
    post:
      summary: Change password
      description: Endpoint to change password
      operationId: changePassword
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/LoginSource'
        - $ref: '#/components/parameters/UserAgent'
      requestBody:
        description: Change password request body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
      responses:
        '200':
          description: OK
        '401':
          description: UNAUTHORISED
  /api/v1/auth/refresh:
    post:
      summary: Token refresh
      description: Endpoint to get new token using refresh token
      operationId: refresh
      tags:
        - Auth
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/LoginSource'
        - $ref: '#/components/parameters/UserAgent'
      requestBody:
        description: Refresh token request body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Refresh'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
  /api/v1/auth/sessions:
    get:
      summary: Get all sessions
      description: Endpoint to get all active sessions of a given user
      operationId: getAllSessions
      tags:
        - Auth
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/UserAgent'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllSessionResponse'
    delete:
      summary: Revoke all refresh tokens
      description: Endpoint to revoke all refresh tokens of a user
      operationId: revokeAllTokens
      tags:
        - Auth
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/UserAgent'
      responses:
        '200':
          description: OK
  /api/v1/auth/sessions/current:
    delete:
      summary: Revoke refresh token
      description: Endpoint to revoke single refresh token
      operationId: revokeRefreshToken
      tags:
        - Auth
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/UserAgent'
      requestBody:
        description: Revoke refresh token request body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeCurrentSession'
      responses:
        '200':
          description: OK
  /api/v1/auth/2fa/setup:
    post:
      summary: Create 2fa
      description: Endpoint to create 2fa for a user
      operationId: create2FA
      tags:
        - 2FA
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/LoginSource'
        - $ref: '#/components/parameters/UserAgent'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TwoFAResponse'
  /api/v1/auth/2fa/verify:
    post:
      summary: Verify 2fa
      description: Endpoint to verify 2fa code of a user
      operationId: verify2FA
      tags:
        - 2FA
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/LoginSource'
        - $ref: '#/components/parameters/UserAgent'
      requestBody:
        description: Verify 2FA code
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verify2FARequest'
      responses:
        '200':
          description: OK
        '401':
          description: UNAUTHORISED
  /api/v1/auth/2fa:
    delete:
      summary: Remove 2fa
      description: Endpoint to remove 2fa code of a user
      operationId: remove2FA
      tags:
        - 2FA
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/LoginSource'
        - $ref: '#/components/parameters/UserAgent'
      requestBody:
        description: Verify 2FA code
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verify2FARequest'
      responses:
        '200':
          description: OK
        '401':
          description: UNAUTHORISED
  /ready:
    get:
      summary: Ready check
      description: Ready check
      tags:
        - Probe
      responses:
        '200':
          description: OK
  /live:
    get:
      summary: Live check
      description: Live check
      tags:
        - Probe
      responses:
        '200':
          description: OK
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    LoginSource:
      name: x-login-source
      description: Login source
      example: web
      in: header
      required: true
      schema:
        type: string
        enum:
          - web
          - mobile
          - api
    UserAgent:
      name: User-Agent
      description: User Agent
      in: header
      required: true
      schema:
        type: string
  schemas:
    UserSignup:
      type: object
      required:
        - email
        - firstName
        - lastName
        - password
      properties:
        email:
          type: string
          pattern:
          example: first.last@example.com
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        2faEnabled:
          type: boolean
          default: false
    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          pattern:
          example: first.last@example.com
        password:
          type: string
    ChangePassword:
      type: object
      required:
        - oldPassword
        - newPassword
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    TokenResponse:
      type: object
      required:
        - accessToken
        - refreshToken
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    Refresh:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
    RevokeCurrentSession:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
    GetAllSessionResponse:
      type: object
      required:
        - issuedAt
        - expiresAt
        - ipAddress
        - userAgent
        - createdBy
      properties:
        issuedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        ipAddress:
          type: string
        userAgent:
          type: string
        createdBy:
          type: string
    TwoFAResponse:
      type: object
      required:
        - qr_image
        - secret
      properties:
        qr_image:
          type: string
        secret:
          type: string
    Verify2FARequest:
      type: object
      required:
        - twoFACode
      properties:
        twoFACode:
          type: string
          pattern: '^\d{6}$'
          example: '123456'
